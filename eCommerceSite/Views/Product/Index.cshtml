@model IEnumerable<Product>
@{ <!--this webpage will be displaying our products in the database. IEnumerable is a interface, using it is more flexiable because it is generic unlike using a list.-->
    ViewData["Title"] = "ProductCatalog";
}

<h1><span class="badge badge-pill badge-dark">Product Catalog</span></h1>

<!--If data is not null or data was inputted then it will show the data that was added successfully-->
@if (TempData["Message"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<a class="btn btn-primary" asp-action="Add" asp-controller="Product">Add Product</a>


<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(m => m.Title)</th>
                <th>@Html.DisplayNameFor(m => m.price)</th>
                <th>@Html.DisplayNameFor(m => m.Category)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(Product p in Model)
            {
                <tr>
                    <td>@p.Title</td>
                    <td>@Html.DisplayFor(m => p.price)</td>
                    <td>@p.Category</td>
                    <td>
                        <a class="btn btn-secondary" href="">Edit</a>
                        <a class="btn btn-danger" href="">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>